{
    "literal": "直接量就是程序中直接使用数据 eg：12",
    "identifier": "标识符就是一个名称，在javascript中标识符就是对变量和函数进行命名的，或者用做javascript某些循环语句中跳转位置的标记。",
    "reserveWord": "javascript把一些标识符拿出来做关键字，因此就不能在程序中使用这些关键字做标识符了",
    "null": "null是javscript语言的关键字，它表示一个特殊值，常用来描述空值。如果对null执行typeof预算，得到结果“object”，也就是说可以把null看作是一个特殊的对象值，含义是“非对象”，但实际上，通常认为null是它自有类型的唯一一个成员，它可以表示数字，字符串，对象是“无值”的",
    "undefined": "undefined是预定义全局的变量（它和null不一样，他不是关键字）,它的值就是“未定义”，如果使用typeof运算符得到undefined的类型，则返回“undefined”，它表示这个值是这个类型的唯一成员。尽管null和undefined的类型是不同，但是它们都表示“值的空缺”，两者之间可以互换。null 和undefined都不包含任何属性和方法。",
    "this": "this关键字经常在面向对象中出线，在一个方法体内，this返回调用这个方法的对象",
    "objectCreateExpresssion": "对象创建表达式和函数创建表达式非常类似，只是对象创建表达式之前多个一个关键字new，如果对象创建表达式不需要传入任何参数给构造函数的话，那么这对空括号式可以省略的",
    "addOperator": "递增“++”运算符对其进行增量加一的操作，操作数是一个左值（变量，数组元素或者一个对象属性），运算符将操作数转换为一个数字，然后进行加1运算，并将加1后的数值赋值给变量、数组元素或者一个对象属性。递增“ ++”运算符的返回值依赖于它相对与操作数的位置。但运算符在操作数之前，称为“前增量”，它对操作数进行增量计算，并返回计算后的值。但运算符在操作数之后，称为“后增量”，它对操作数进行增量计算，但返回未做增量计算的值，eg：var i=0,j=++i; //i=1;j=1; var i=0,j=i++; //i=1;j=0; <span>**** 需要注意的是：表达式++x和x=x+1并不是总不一样的，“++”从不进行运算符连接运算，它总是将操作数转换为数字并增1。如果x是“1”的话，++x的结果是2， x+1是字符串“11”</span>；递减“--”运算符同理",
    "instanceof": "instanceof 希望左操作数是一个对象，右操作数标示对象的类。如果左侧对象是右侧类的实例，返回true，否则返回false。在javascript中对象的类是通过初始化它们的构造函数来定义的，这样的话，instanceof的右操作数应当是一个函数。<span>**** 需要注意的是：所有的对象都是Object的实例，但使用instanceof判断一个对象是否是一个类的实例时候，这个判读也会包涵“父类”的检测</span>",
    "typeof": "是一个一元运算符，返回值为表示操作数类型的一个字符串。",
    "in": "in运算符希望它的是一个字符串或者可以转化为一个字符串，希望它的右操作数是一个对象。如果右侧对象拥有一个左操作数值的属性名，那么表达式返回true。in判断自有属性和继承属性， 返回true。 in可以区分不存在的属性和存在但值为undefined的属性。eg: var o = {x:undefined}; o.x !== undefined; //false存在，值undefined; o.y !== undefined; //false 不存在； “x” in o;//true 属性存在; “y” in o;//false属性不存在",
    "hasOwnProperty": "hasOwnProperty()用来检测是否是对象的自有属性，返回true",
    "propertyIsEnumerable": "是hasOwnProperty()方法的增强版，检测是自有属性切是可枚举的返回true", 
    "forIn": "for/in并不会遍历对象中的所有属性，只有“可枚举”的属性才会遍历到。由javascript语言核心所定义的内置方法就不是“可枚举的”。比如所有对象都有toString()方法，但是for／in循环并不枚举toString。",
    "scopeChain": "作用域链的概念对于理解with/闭包很重要。",
    "with": "在严格模式下禁止使用with语句，非严格模式下不推荐使用。因为使用with语句的javascript语句难以优化，它运行慢",
    "objectAttribute": "除了包含属性之外，没个对象还拥有三个相关的对象特性：对象的原型 (prototype)指向另一个对象，本对象的属性继承自它的原型对象；对象的类是一个标识对象类型的字符串；对象的扩展标记指明了是否可以向该对象添加新属性；",
    "prototypeChain": "没有原型的对象为数不多，Object.prototype就是其中之一，它不继承任何属性。其他原型对象都是普通对象，普通对象都有原型。所有内置构造函数（以及大部分自定义构造函数）都具有一个继承自Object.prototype的原型。如：Date.prototype属性继承自Object.prototype, 因此由new Date()创建的Date对象的属性同时继承自Date.prototype & Object.prototype。这一个系列链接的原型对象就是所谓的“原型链”",
    "prototype": "每一个javascript对象（null除外），都和另一个对象相关联。“另一个”对象，就是我们熟知的原型，每一个对象都从原型继承属性。"
}